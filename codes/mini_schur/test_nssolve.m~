%% test driver to solve NS problem using overlapping Schur
%% complement method
function x1 = test_nssolve;
clear all, clc
P = load('/home/pawan/Work/Soft/ifiss3.2/datafiles/matlab.mat');
addpath /home/pawan/Work/Soft/MATLAB_DEMOS/armsC
A = [P.Anst P.Bst'; P.Bst zeros(P.np,P.np)]; nC = size(A,1);
b = [P.fst; P.gst]; [rperm, nD] = indset(A,0,400); A = A(rperm,rperm); 
b = b(rperm); A = equil2(A);
nG = nC-nD; D = A(1:nD,1:nD); G = A(nD+1:nC, nD+1:nC); 
E = A(1:nD, nD+1:nC); F = A(nD+1:nC, 1:nD);

nmsc = 10; r = rem(nG, nmsc); sz = (nG - r)/nmsc; r1 = 1; r2 = sz;
for i = 1 : nmsc
    PD{i} = A(r1:r2, r1:r2); PE{i} = E(r1:r2, r1:r2);
    PF{i} = F(r1:r2, r1:r2); PG{i} = G(r1:r2, r1:r2);
    r1 = r2+1; r2 = r2+sz;
end

for i = 1 : nmsc
    det(PD{i})
    S{i} = PG{i} - PF{i}*inv(PD{i})*(PE{i});
    det(S{i})
    %  [LG{i}, UG{i}] = lu(S{i});
end


% r2 = nG; last = nmsc+1;
% if (r ~= 0)
%     PD{last} = A(r1:r2, r1:r2); PE{last} = E(r1:r2, r1:r2);
%     PF{last} = F(r1:r2, r1:r2); PG{last} = G(r1:r2, r1:r2);
%     r1 = r2+1; r2 = r2+sz;
%     S{last} = PG{last} - PF{last}*PD{last}\(PE{last});
%     % [LG{last}, UG{last}] = lu(S{last});
% end
% 
% GS = [];
% for i = 1: nmsc
%     GS = blkdiag(GS, S{i}); GS = sparse(GS);
% end
% GS = blkdiag(GS, S{last}); GS = sparse(GS); [LG,UG] = lu(GS); clear GS S
% clear PD PE PF PG
% precfun = @nssolve; sol = zeros(nC,1); setup.type = 'ilutp'; ...
%           setup.droptol = 0.0001;
%       fprintf('ilu ...\n');
% [LD,UD] = ilu(D,setup);
% clear D G
% fprintf('Enter GMRES ...\n')
% %[sol,res,its] = fgmres2(A,nD,nG,precfun,b,sol,E,F,LD,UD,LG,UG); 
% [x,flag,relres,iter] = gmres(A,b,10,1e-9,1,@nssolve2);
% 
% iter
% flag
% relres
% 
% function x = nssolve2(y)
%     y1 = y(1:nD); y2 = y(nD+1:nD+nG);  
%     z1 = UD\(LD\y1); z2 = UG\(LG\(y2 - F*z1)); 
%     x2 = z2; x1 = z1 - UD\LD\(E * x2);
%     x = [x1; x2];
% %sum(isnan(x))
% end

end
