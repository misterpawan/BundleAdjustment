* Function list
|---------------------------+-------------------+--------------------------------------+--------|
| Function                  | Name              | Parameters                           | Tested |
|---------------------------+-------------------+--------------------------------------+--------|
| BASIC                     |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| Translate 3D              | xlat3             | point p, point c                     | X      |
| Translate 2D              | xlat2             | point u, point c                     | X      |
| Scale 3D                  | scale3            | point p, scale factor c              | X      |
| Scale 2D                  | scale2            | point u, scale factor c              | X      |
| Linear transform 3D       | lin3              | point p, 3x3 matrix                  | X      |
| Linear transform 2D       | lin2              | point u, 2x2 matrix                  | X      |
| Pinhole projection        | pinhole           | 3D point p                           | X      |
|---------------------------+-------------------+--------------------------------------+--------|
| ROTATION                  |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| Euler rotation matrix     | eulerrotmat       | angles, axis sequence, fixed/moving  | X      |
|---------------------------+-------------------+--------------------------------------+--------|
| AFFINE                    |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| Affine 2D matrix          | affine2mat        | b                                    | X      |
| Affine 2D                 | affine2           | u,b                                  | X      |
| Anisotropic scaling       | aniscale          | u,b1                                 | X      |
| Anisotropic scaling       | aniscale2         | u,k                                  |        |
| Skew                      | skew              | u,b2                                 | X      |
|---------------------------+-------------------+--------------------------------------+--------|
| LENS DISTORTION           |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| radius                    | lens_rad2         | u                                    | X      |
| vector of powers          | power_vec         | x                                    | X      |
| radial scaling            | rad_scale         | u,c                                  | X      |
| tangential scaling        | tang_scale        | u,p                                  | X      |
| radial distortion         | brown_rad         | u,K                                  | X      |
| tangential distortion     | brown_tang        | u,P                                  | X      |
| total lens distortion     | brown_dist        | u,K,P                                | X      |
|---------------------------+-------------------+--------------------------------------+--------|
| COMPOSITE                 |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| xform pt to cam coord sys | world2cam         | P, p0, M                             | X      |
| pinhole with euler angles | eulerpinhole      | P, p0, angles, f                     | X      |
|---------------------------+-------------------+--------------------------------------+--------|
| RESIDUAL FUNCTIONS        |                   |                                      |        |
|---------------------------+-------------------+--------------------------------------+--------|
| euler, brown w no affine  | res_euler_brown_0 | P, p0, angles, f, u, sz, u0, K, P    |        |
| euler, brown w aff b lens | res_euler_brown_1 | P, p0, angles, f, u, sz, u0, K, P, b |        |
| euler, brown w aff a lens | res_euler_brown_2 | P, p0, angles, f, u, sz, u0, K, P, b |        |
| euler, brown w aff split  | res_euler_brown_3 | P, p0, angles, f, u, sz, u0, K, P, b |        |

|--------------------------+----------------+-------------------------------+---|
| UNUSED                   |                |                               |   |
|--------------------------+----------------+-------------------------------+---|
| relative lens distortion | brown_dist_rel | u,u0,K,P                      | X |
| affine scaling           | affscale2      | u, k, b1, b2                  | X |
| Reflection 3D            | reflect3       | ?                             |   |
| Reflection 2D            | reflect2       | ?                             |   |
| brown with affine xform  | brown_affine   | u, sz, u0, K, P, b1, b2, case | X |


* RHS versions

0) [@0] No affinity and with square pixels
   1) Convert from pixels to mm
   2) Subtract principal point
   3) Correct for lens distortion
1) Before lens distortion
   1) Convert from pixels to mm
   2) Subtract principal point
   2.5) Apply affine transformation
      a) Anisotropic scaling
      b) Skew
   3) Correct for lens distortion
2) After lens distortion
   1) Convert from pixels to mm
   2) Subtract principal point
   3) Correct for lens distortion
   3.5) Apply affine transformation
      a) Anisotropic scaling
      b) Skew
3) Mixed
   1) Convert from pixels to mm
   1.5) Anisotropic scaling
   1) Subtract principal point
   2) Correct for lens distortion
   3.5) Apply skew

* General structure
The public definition of each model function is

  =[v, dv]=name(param1, param2, ..., deriv1, deriv2, ...)=

The number of input parameters will wary with function. The number of
output parameters will be the same. The first parameter =v= is the
actual computed value. The second parameter =dv= is a structure that
can contain the analytical Jacobian with respect to each parameter.

The Jacobians are often expensive to compute and are not always
needed. Thus, no Jacobian is computed unless =dv= is asked for.
Furthermore, the derivN parameters allow for a fine-grained selection
of what Jacobians should be computed. For instance,

  =[x,dv]=xlat3(p,c,false,true)=

would only compute the Jacobian with respect to c.

Furthermore, for every function there are two 'undocumented' features
used for testing purposes.
1) The real implementation contains a third return parameter =[v, dv,
   dva]...=. If asked for, =dva= will contain numerical approximations
   of the analytical Jacobians, in a struct with the same structure as
   =dv=.
2) If the function is called with a single, string, parameter, e.g.
   'selftest', a self-test will be carried out and the result written
   in the command window. The self-test computes and compares the
   numerical and analytical Jacobians with each other and can be used
   to verify a correct implementation of the analytical Jacobian.

